@typeparam T
@inherits MudAutocomplete<T>

<MudAutocomplete T="int" Label="@label" Margin="Margin.Dense" Dense="true" Variant="Variant.Outlined" ResetValueOnEmptyText="true" SearchFunc="@SearchComboBoxData" For="@(() => selectValue)" ToStringFunc="@(i => data.FirstOrDefault(b => b.Key == i)?.Value ?? string.Empty)" OffsetY="true" @bind-Value="CurrentValue"></MudAutocomplete>

@code {
    [Parameter] public string? _label { get; set; }
    [Parameter] public List<DropDownListModel>? _data { get; set; }
    [Parameter]
    public int CurrentValue
    {
        get => selectValue;
        set
        {
            if (selectValue == value) return;
            selectValue = value;
            CurrentValueChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<int> CurrentValueChanged { get; set; }
    private string? label;

    private List<DropDownListModel> data;
    private int selectValue;

    protected override void OnParametersSet()
    {
        label = _label;
        data = _data;
        selectValue = CurrentValue;
        base.OnParametersSet();
    }

    private async Task<IEnumerable<int>> SearchComboBoxData(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return _data.Select(x => x.Key);

        if (data.Any(x => x.Value.Equals(value,StringComparison.InvariantCultureIgnoreCase)))
            return _data.Select(x => x.Key);

        return data.Where(x => x.Value.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Select(x => x.Key);
    }
}